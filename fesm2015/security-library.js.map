{"version":3,"file":"security-library.js","sources":["../../../projects/security-library/src/lib/shared/material-ui/material-ui.module.ts","../../../projects/security-library/src/config-library.interface.ts","../../../projects/security-library/src/lib/login/services/encrDecr.service.ts","../../../projects/security-library/src/lib/login/services/mapperTemplate.service.ts","../../../projects/security-library/src/lib/login/services/authMapper.service.ts","../../../projects/security-library/src/lib/login/interfaces/token-payload-provider.interface.ts","../../../projects/security-library/src/lib/login/services/auth.service.ts","../../../projects/security-library/src/lib/login/login-library.component.ts","../../../projects/security-library/src/lib/login/login-library.component.html","../../../projects/security-library/src/lib/login/recovery-password/recovery-password.component.ts","../../../projects/security-library/src/lib/login/recovery-password/recovery-password.component.html","../../../projects/security-library/src/lib/login/services/implements/sessionstorage-token-provider.service.ts","../../../projects/security-library/src/lib/security-library.module.ts","../../../projects/security-library/src/lib/login/services/auth-AD.service.ts","../../../projects/security-library/src/lib/login/interceptors/auth-interceptor.interceptor.ts","../../../projects/security-library/src/lib/login/models/login-user.model.ts","../../../projects/security-library/src/lib/login/models/token-payload.model.ts","../../../projects/security-library/src/lib/login/models/token.model.ts","../../../projects/security-library/src/lib/login/models/user-detail.model.ts","../../../projects/security-library/src/lib/login/models/user-role.model.ts","../../../projects/security-library/src/public-api.ts","../../../projects/security-library/src/security-library.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatFormFieldModule }  from '@angular/material/form-field';\r\n\r\nconst MaterialModules = [\r\n  MatSliderModule,\r\n  MatCheckboxModule,\r\n  MatInputModule,\r\n  MatRadioModule,\r\n  MatButtonModule,\r\n  MatSidenavModule,\r\n  MatMenuModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatDividerModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatToolbarModule,\r\n  MatTabsModule,\r\n  MatDialogModule,\r\n  MatSortModule,\r\n  MatPaginatorModule,\r\n  MatTableModule,\r\n  MatDatepickerModule,\r\n  MatSelectModule,\r\n  MatNativeDateModule,\r\n  MatTreeModule,\r\n  MatStepperModule,\r\n  MatTooltipModule,\r\n  MatProgressSpinnerModule,\r\n  MatSnackBarModule,\r\n  MatExpansionModule,\r\n  MatSlideToggleModule,\r\n  MatAutocompleteModule,\r\n  MatProgressBarModule,\r\n  MatFormFieldModule ,\r\n];\r\n\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    ...MaterialModules\r\n  ],\r\n  exports: [\r\n    ...MaterialModules\r\n  ]\r\n})\r\nexport class MaterialUiModule { }\r\n\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport class IConfigLibrary{\r\n    whiteList!: IWhiteList[];\r\n    encryptPhrase!:string;\r\n    apiURL!:string;\r\n    refreshTokenURL!:string;\r\n    accessTokenURL!:string;\r\n    resetPasswordURL!:string;\r\n    loginType!:string;\r\n    redirectUri!:string;\r\n}\r\n\r\nexport class IWhiteList{\r\n    word!: string\r\n}\r\n\r\n\r\nexport const defaultConfigLibrary: IConfigLibrary = {\r\n    whiteList: [\r\n        {\r\n            word: 'oauth/token',\r\n        }\r\n    ],\r\n    encryptPhrase: 'dAN0n3IR0nM4n4p1',\r\n    apiURL: 'http://localhost:8082/',\r\n    refreshTokenURL: 'oauth/refreshToken',\r\n    accessTokenURL: 'oauth/token',\r\n    resetPasswordURL: 'oauth/resetPassword',\r\n    loginType: 'both',\r\n    redirectUri: 'https://www.google.com.mx/',\r\n}\r\n\r\nexport const CONFIGLIBRARY = new InjectionToken<IConfigLibrary>('defaultConfigLibrary');\r\n","import { Inject, Injectable } from '@angular/core';\r\n\r\nimport * as CryptoJS from 'crypto-js';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nimport { CONFIGLIBRARY, IConfigLibrary } from \"../../../config-library.interface\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class EncrDecrService {  \r\n    encryptPhrase:string\r\n\r\n    constructor(\r\n        @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary\r\n    ){\r\n        this.encryptPhrase = configLibrary.encryptPhrase \r\n    }\r\n    //Encrypt\r\n    set(value: any) {\r\n        var key = CryptoJS.enc.Utf8.parse(this.encryptPhrase);\r\n        var iv = CryptoJS.enc.Utf8.parse(this.encryptPhrase);\r\n        var encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(value.toString()), key,\r\n            {\r\n            //    keySize: 128 / 8,\r\n                iv: iv,\r\n                mode: CryptoJS.mode.CBC,\r\n                padding: CryptoJS.pad.ZeroPadding\r\n            });\r\n\r\n        return encrypted.toString();\r\n    }\r\n\r\n    //Decrypt\r\n    get(value: any) {\r\n        var key = CryptoJS.enc.Utf8.parse(this.encryptPhrase);\r\n        var iv = CryptoJS.enc.Utf8.parse(this.encryptPhrase);\r\n        var decrypted = CryptoJS.AES.decrypt(value, key, {\r\n           // keySize: 128 / 8,\r\n            iv: iv,\r\n            mode: CryptoJS.mode.CBC,\r\n            padding: CryptoJS.pad.ZeroPadding\r\n        });\r\n\r\n        return decrypted.toString(CryptoJS.enc.Utf8);\r\n    }\r\n\r\n    getDecodedAccessToken(token: string): any {\r\n        try{\r\n            return jwt_decode(token);\r\n        }\r\n        catch(Error){\r\n            return null;\r\n        }\r\n      }\r\n}","export interface IMapperService<S, T> {\r\n    transform(entity: S): T;\r\n    transform(array: S[]): T[];\r\n    transform(entityOrArray: S | S[]): T | T[];\r\n}\r\n\r\nexport abstract class MapperService<S, T> implements IMapperService<S, T> {\r\n\r\n    protected abstract map(entity: S): T;\r\n\r\n    transform(entity: S): T;\r\n    transform(array: S[]): T[];\r\n    transform(entityOrArray: S | S[]): T | T[] {\r\n        return Array.isArray(entityOrArray) ?\r\n            entityOrArray.map((item: S) => this.map(item)) :\r\n            this.map(entityOrArray);\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { TokenProviderDTO } from \"../interfaces/token-payload-interface\";\r\nimport { TokenProviderModel } from \"../models/token-payload.model\";\r\nimport { MapperService } from './mapperTemplate.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthMapperService extends MapperService<TokenProviderDTO<any, any>, TokenProviderModel<any,any>> {\r\n\r\n    protected map(response: TokenProviderDTO<any,any>): TokenProviderModel<any,any> {\r\n        return {\r\n            userDetails: (response as unknown as TokenProviderModel<any, any>).userDetails,\r\n            roles: (response as unknown as TokenProviderModel<any, any>).roles,\r\n            token: (response as unknown as TokenProviderModel<any, any>).token\r\n        }\r\n    } \r\n}","import { forwardRef, Injectable } from \"@angular/core\";\r\nimport { TokenProviderModel } from \"../models/token-payload.model\";\r\nimport { SessionstorageTokenProviderService } from \"../services/implements/sessionstorage-token-provider.service\";\r\n\r\nexport interface ITokenProvider <UserDetailsType, UserRolesType> {\r\n    getToken():  TokenProviderModel<UserDetailsType, UserRolesType>;\r\n    setToken(token: TokenProviderModel<UserDetailsType,UserRolesType>);\r\n    removeToken():void;\r\n}\r\n\r\nexport abstract class TokenPorviderService <UserDetailsType = any, UserRolesType = any> implements ITokenProvider <UserDetailsType, UserRolesType>{\r\n    public abstract getToken(): TokenProviderModel<UserDetailsType, UserRolesType>\r\n    public abstract setToken(token: TokenProviderModel<UserDetailsType, UserRolesType>):void\r\n    public abstract removeToken():void\r\n}","import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { AuthMapperService } from \"./authMapper.service\";\r\nimport { EncrDecrService } from './encrDecr.service';\r\nimport { TokenPorviderService } from '../interfaces/token-payload-provider.interface';\r\n\r\nimport { ResponseApiDTO } from '../interfaces/response-api.interface';\r\nimport { TokenPayloadDTO } from \"../interfaces/token-payload-interface\";\r\nimport { ILoginProvider } from \"../interfaces/login-provider-interface\";\r\nimport { CONFIGLIBRARY, IConfigLibrary } from \"../../../config-library.interface\";\r\n\r\nimport { TokenProviderModel } from \"../models/token-payload.model\";\r\nimport { LoginUserModel } from '../models/login-user.model';\r\nimport { ResetPasswordModel } from '../models/reset-password.model';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService<UserDetailsType = any, UserRolesType = any> implements ILoginProvider<UserDetailsType,UserRolesType>{\r\n    apiURL:string;\r\n    refreshTokenURL: string;\r\n    accessTokenURL: string;\r\n    resetPasswordURL: string;\r\n    loginType: string = '';\r\n\r\n    constructor(\r\n        @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary,\r\n        private http: HttpClient,\r\n        private encrDecr: EncrDecrService,\r\n        private _authMapperService: AuthMapperService,\r\n        private tokenPorviderService: TokenPorviderService<UserDetailsType,UserRolesType>) {\r\n            this.apiURL = configLibrary.apiURL;\r\n            this.refreshTokenURL = configLibrary.refreshTokenURL;\r\n            this.accessTokenURL = configLibrary.accessTokenURL;\r\n            this.resetPasswordURL = configLibrary.resetPasswordURL;\r\n            this.loginType = configLibrary.loginType;\r\n    }\r\n\r\n    public login(user: LoginUserModel): Observable<TokenProviderModel<UserDetailsType,UserRolesType>>{\r\n        let data = this.encrDecr.set(user.userName + '|' + user.password);\r\n        data = data.replace('+', 'xMl3Jk').replace(/\\//g, 'Por21Ld').replace('=', 'Ml32');\r\n        let token = {\r\n            'token': data\r\n        }\r\n\r\n        let url = `${ this.apiURL }${ this.accessTokenURL }`;\r\n        \r\n        return this.http.post(url, token)\r\n        .pipe(\r\n            map(\r\n                (respApi: any) => {\r\n                    let decodeAcsessToken: TokenPayloadDTO = this.encrDecr.getDecodedAccessToken(respApi.content.token.accessToken);\r\n                    decodeAcsessToken.DanoneTokenPayload.token = respApi.content.token;\r\n                    return this._authMapperService.transform(decodeAcsessToken.DanoneTokenPayload);\r\n                }\r\n            )\r\n        );\r\n    }\r\n    public refreshToken() {\r\n        let url = `${ this.apiURL }${ this.refreshTokenURL }`;\r\n\r\n        return this.http.post(url, '');\r\n      }\r\n\r\n    public isAuthenticated(): boolean {\r\n        return (this.tokenPorviderService.getToken() ? true : false);\r\n    }\r\n\r\n    public logOut(){\r\n        this.tokenPorviderService.removeToken();\r\n    }\r\n\r\n    public resetPassword(email: ResetPasswordModel){\r\n        let url = `${ this.apiURL }${ this.resetPasswordURL }`;\r\n        return this.http.post(url, email);\r\n    }\r\n    \r\n}","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { AuthenticationService } from './services/auth.service';\r\nimport { TokenPorviderService } from './interfaces/token-payload-provider.interface';\r\nimport { CONFIGLIBRARY, IConfigLibrary } from '../../config-library.interface';\r\n@Component({\r\n   selector: 'lib-security-library-login',\r\n   templateUrl: './login-library.component.html',\r\n   styleUrls: ['./login-library.component.scss']\r\n})\r\nexport class LoginLibraryComponent implements OnInit {\r\n   @Output() loginClick = new EventEmitter();\r\n   @Output() resetClick = new EventEmitter();\r\n\r\n   public loginForm!: FormGroup;\r\n   public isAuthenticated = false;\r\n   public typeLogin: string = '';\r\n   isAd: boolean = false;\r\n   tokenAd: string = '';\r\n   redirectUri: string = '';\r\n\r\n   constructor(\r\n      @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary,\r\n      private fb: FormBuilder,\r\n      private authService: AuthenticationService,\r\n      private tokenPorviderService: TokenPorviderService\r\n   ) {\r\n      this.typeLogin = configLibrary.loginType;\r\n      this.redirectUri = configLibrary.redirectUri;\r\n    }\r\n\r\n   public ngOnInit(): void {\r\n      this.loadForm();\r\n      this.typeLogin = this.authService.loginType;\r\n   }\r\n\r\n   private loadForm() {\r\n      this.loginForm = this.fb.group({\r\n         userName: new FormControl(null, [Validators.required, Validators.maxLength(50)]),\r\n         password: new FormControl(null, [Validators.required, Validators.maxLength(50)]),\r\n      })\r\n   }\r\n\r\n   public login() {\r\n      if (this.loginForm.invalid) {\r\n         this.loginClick.emit(false)\r\n      }\r\n      else {\r\n         this.authUser();\r\n      }\r\n   }\r\n\r\n   private authUser() {\r\n      this.authService.login(this.loginForm.value).subscribe(\r\n         response => {\r\n            if (response) {\r\n               this.tokenPorviderService.setToken(response);\r\n               this.loginClick.emit(true);\r\n            }\r\n            else {\r\n               this.loginClick.emit(false)\r\n            }\r\n         },\r\n         error => {\r\n            console.log(error)\r\n            this.loginClick.emit(false)\r\n         }\r\n      )\r\n   }\r\n\r\n   public loginAD() {\r\n      window.location.href=`${this.redirectUri}`;\r\n   }\r\n\r\n   //Reset Password\r\n   public recoveryPassEmit(){\r\n      this.resetClick.emit(true);\r\n   }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"row form-content justify-content-start align-items-center\">\r\n    <form [formGroup]=\"loginForm\" >\r\n      <div class=\"col col-xl-4 col-lg-8 col-md-8 col-12\">\r\n        <div class=\"container-fluid\">\r\n          <div *ngIf=\"typeLogin !== 'internal'\" class=\"row\">\r\n            <div class=\"col col-12\">\r\n              <mat-label>Correo\r\n              </mat-label>\r\n              <mat-form-field [style.fontSize.px]=\"12\" appearance=\"outline\">\r\n                <mat-label>ejemplo@corrreo.com\r\n                </mat-label>\r\n                <mat-icon matSuffix>email</mat-icon>\r\n                <input \r\n                  matInput \r\n                  type=\"text\" \r\n                  placeholder=\"ejemplo@corrreo.com\" \r\n                  maxlength=\"50\" \r\n                  formControlName=\"userName\" \r\n                  name=\"userName\" \r\n                  id=\"userName\" \r\n                  required>\r\n                  \r\n                <mat-error *ngIf=\"loginForm.get('userName')?.hasError('required') && loginForm.get('userName')?.touched\">\r\n                  Campo requerido\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col col-12\">\r\n              <mat-label>Contraseña</mat-label>\r\n              <mat-form-field [style.fontSize.px]=\"12\" appearance=\"outline\">\r\n                <mat-label>contraseña</mat-label>\r\n                <mat-icon matSuffix>vpn_key</mat-icon>\r\n                <input \r\n                  matInput \r\n                  type=\"password\" \r\n                  placeholder=\"Contraseña\" \r\n                  maxlength=\"50\" \r\n                  formControlName=\"password\" \r\n                  name=\"password\" \r\n                  id=\"passwor\" \r\n                  required>\r\n                <mat-error *ngIf=\"loginForm.get('password')?.hasError('required') && loginForm.get('password')?.touched\">\r\n                  Campo requerido\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"row recovery-pass\">\r\n              <div class=\"col col-12\">\r\n                <button mat-button class=\"btn_tertiary\" (click)=\"recoveryPassEmit()\">Olvide mi contraseña</button>\r\n              </div>\r\n            </div>\r\n            <div class=\"col col-12 text-center\">\r\n              <button class=\"btn_primary\" (click)=\"login()\">Iniciar sesión</button>\r\n            </div> \r\n          </div>\r\n          <div *ngIf=\"typeLogin !== 'external'\" class=\"col col-12 text-center\">\r\n            <button mat-button class=\"btn_tertiary\" (click)=\"loginAD()\">Ingresar con Active Directory</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>   \r\n  </div>\r\n</div>","import { Component, Inject, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthenticationService } from '../services/auth.service';\r\nimport { CONFIGLIBRARY, IConfigLibrary } from '../../../config-library.interface';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'lib-security-library-recovery-password',\r\n  templateUrl: './recovery-password.component.html',\r\n  styleUrls: ['./recovery-password.component.scss']\r\n})\r\nexport class RecoveryPasswordComponent implements OnInit {\r\n  @Output() returnToLogin = new EventEmitter();\r\n  @Output() restorePass = new EventEmitter();\r\n  public recoveryForm!: FormGroup;\r\n\r\n  constructor(\r\n    @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary,\r\n    private fb: FormBuilder,\r\n    private authService: AuthenticationService,\r\n  ) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.loadForm();\r\n  }\r\n\r\n  private loadForm() {\r\n    this.recoveryForm = this.fb.group({\r\n      email: new FormControl(null, [Validators.required, Validators.maxLength(50)])\r\n    })\r\n  }\r\n\r\n  backtoLogin() {\r\n    this.returnToLogin.emit(true);\r\n  }\r\n\r\n  restablecerPass() {\r\n    if (this.recoveryForm.invalid) {\r\n      this.restorePass.emit(false)\r\n    }\r\n    else {\r\n      this.authResetPass();\r\n    }\r\n  }\r\n\r\n  private authResetPass(){\r\n    this.authService.resetPassword(this.recoveryForm.value).subscribe(\r\n      response => {\r\n          this.restorePass.emit(true);\r\n      },\r\n      error => {\r\n         console.log(error)\r\n         this.restorePass.emit(false)\r\n      }\r\n    )\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"row form-content justify-content-start align-items-center\">\r\n    <form [formGroup]=\"recoveryForm\">\r\n      <div class=\"col col-xl-4 col-lg-8 col-md-8 col-12\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row\">\r\n            <div class=\"col col-12\">\r\n              <mat-label>Correo\r\n              </mat-label>\r\n              <mat-form-field [style.fontSize.px]=\"12\" appearance=\"outline\">\r\n                <mat-label>ejemplo@corrreo.com\r\n                </mat-label>\r\n                <mat-icon matSuffix>email</mat-icon>\r\n                <input matInput type=\"text\" placeholder=\"ejemplo@corrreo.com\" maxlength=\"50\" formControlName=\"email\"\r\n                  name=\"email\" id=\"email\" required>\r\n\r\n                <mat-error\r\n                  *ngIf=\"recoveryForm.get('email')?.hasError('required') && recoveryForm.get('email')?.touched\">\r\n                  Campo requerido\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </div>\r\n            <div class=\"col col-12\">\r\n              <button class=\"btn_primary\" (click)=\"restablecerPass()\">Restablecer</button>\r\n            </div>\r\n            <div class=\"col col-12 text-center\">\r\n              <button mat-button class=\"col-12 btn_tertiary\" (click)=\"backtoLogin()\">Regresar</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { TokenProviderModel } from '../../models/token-payload.model';\r\nimport { ITokenProvider } from '../../interfaces/token-payload-provider.interface';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SessionstorageTokenProviderService<userDetailsType,userRolesType> implements ITokenProvider<userDetailsType,userRolesType>{\r\n  private userSessionKey = 'token';\r\n\r\n  public removeToken():void {\r\n    sessionStorage.removeItem(this.userSessionKey);\r\n  }\r\n\r\n  public setToken(token: TokenProviderModel<userDetailsType,userRolesType>): void {\r\n    sessionStorage.setItem(this.userSessionKey, JSON.stringify(token));\r\n  }\r\n\r\n  public getToken(): TokenProviderModel<userDetailsType,userRolesType> {\r\n      if(sessionStorage.getItem(this.userSessionKey)){\r\n        return JSON.parse(sessionStorage.getItem(this.userSessionKey)as string) as TokenProviderModel<userDetailsType,userRolesType>; \r\n      }\r\n      return undefined!;\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MaterialUiModule } from \"../lib/shared/material-ui/material-ui.module\";\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'; \r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { LoginLibraryComponent } from './login/login-library.component';\r\nimport { RecoveryPasswordComponent } from './login/recovery-password/recovery-password.component';\r\nimport { CONFIGLIBRARY, defaultConfigLibrary, IConfigLibrary } from \"../config-library.interface\";\r\nimport { TokenPorviderService } from './login/interfaces/token-payload-provider.interface';\r\nimport { SessionstorageTokenProviderService } from './login/services/implements/sessionstorage-token-provider.service';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginLibraryComponent,\r\n    RecoveryPasswordComponent\r\n  ],\r\n  imports: [\r\n    // BrowserModule,\r\n    // BrowserAnimationsModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MaterialUiModule\r\n  ],\r\n  exports: [\r\n    LoginLibraryComponent,\r\n    RecoveryPasswordComponent\r\n  ],\r\n  providers: [\r\n    {provide: CONFIGLIBRARY, useValue: defaultConfigLibrary},\r\n    {provide: TokenPorviderService, useValue: SessionstorageTokenProviderService}\r\n  ]\r\n})\r\nexport class SecurityLibraryModule {\r\n\r\n  public static withProviders(configLib: IConfigLibrary): ModuleWithProviders<SecurityLibraryModule>{\r\n    return {\r\n      ngModule: SecurityLibraryModule,\r\n      providers: [\r\n        {\r\n          provide: CONFIGLIBRARY, useValue: configLib\r\n        },\r\n        { \r\n          provide: TokenPorviderService, useExisting: SessionstorageTokenProviderService\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { CONFIGLIBRARY, IConfigLibrary } from '../../../config-library.interface';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ILoginProviderAD } from '../interfaces/login-provider-interface';\r\nimport { ResponseApiDTO } from '../interfaces/response-api.interface';\r\nimport { TokenPayloadDTO } from '../interfaces/token-payload-interface';\r\nimport { TokenProviderModel } from '../models/token-payload.model';\r\nimport { AuthMapperService } from './authMapper.service';\r\nimport { EncrDecrService } from './encrDecr.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthAdService<UserDetailsType = any, UserRolesType = any> implements ILoginProviderAD<UserDetailsType,UserRolesType> {\r\n  apiURL:string;\r\n  refreshTokenURL?: string;\r\n  typeLogin?: string;\r\n\r\n  constructor(\r\n    @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary,\r\n    private http: HttpClient,\r\n    private encrDecr: EncrDecrService,\r\n    private _authMapperService: AuthMapperService\r\n  ) { \r\n    this.apiURL = configLibrary.apiURL;\r\n  }\r\n\r\n  public loginAD(data): Observable<TokenProviderModel<UserDetailsType,UserRolesType>> {\r\n    let decodeAcsessToken: TokenPayloadDTO = this.encrDecr.getDecodedAccessToken(data.content.token.accessToken);\r\n    decodeAcsessToken.DanoneTokenPayload.token = data.content.token;\r\n    return of(this._authMapperService.transform(decodeAcsessToken.DanoneTokenPayload));\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpHeaders, HttpResponse } from '@angular/common/http';\r\n\r\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\r\nimport { catchError, filter, retryWhen, switchMap, take, tap } from 'rxjs/operators';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { Router } from '@angular/router';\r\n\r\nimport { CONFIGLIBRARY, IConfigLibrary, IWhiteList } from \"../../../config-library.interface\";\r\n\r\nimport { AuthenticationService } from '../services/auth.service';\r\n\r\nimport { TokenProviderModel } from \"../models/token-payload.model\";\r\nimport { TokenPorviderService } from '../interfaces/token-payload-provider.interface';\r\nimport { ResponseApiDTO } from '../interfaces/response-api.interface';\r\nimport { EncrDecrService } from '../services/encrDecr.service';\r\nimport { TokenPayloadDTO } from '../interfaces/token-payload-interface';\r\nimport { AuthMapperService } from '../services/authMapper.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  token!: TokenProviderModel<any, any>;\r\n  whiteList: Array<IWhiteList>\r\n  refreshTokenURL: string;\r\n  accessTokenURL: string;\r\n  \r\n  constructor(\r\n    @Inject(CONFIGLIBRARY) configLibrary: IConfigLibrary,\r\n    private router: Router,\r\n    private tokenPorviderService: TokenPorviderService, \r\n    private authService: AuthenticationService,\r\n    private auth: AuthenticationService<any, any>,\r\n    private encrDecr: EncrDecrService,\r\n    private _authMapperService: AuthMapperService\r\n  ){\r\n    this.whiteList = configLibrary.whiteList\r\n    this.refreshTokenURL = configLibrary.refreshTokenURL;\r\n    this.accessTokenURL = configLibrary.accessTokenURL;\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    this.token = this.tokenPorviderService.getToken();\r\n    let isNeedToken : Boolean = true;\r\n\r\n    if(this.whiteList){\r\n      this.whiteList.forEach(element => {\r\n        if(req.url.includes(`${element.word}`)){\r\n          isNeedToken = false;\r\n\r\n          req.clone({\r\n            setHeaders: {\r\n              'Content-Type': 'application/json',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        } \r\n        return next.handle(req);  \r\n      });\r\n    }\r\n\r\n    \r\n    if (this.token && isNeedToken) {\r\n      req = this.addTokenHeader(req, this.token.token.accessToken as string);\r\n    }\r\n\r\n    if(this.token && req.url.includes(`${this.refreshTokenURL}`)){\r\n      req = this.addTokenHeader(req, this.token.token.refreshToken as string);\r\n    }\r\n\r\n    return next.handle(req).pipe(catchError(\r\n      e => {\r\n        // Checamos si tiene acceso...\r\n        if (e.status == 401) {\r\n          if(!e.url.includes(this.accessTokenURL)\r\n              && !e.url.includes(this.refreshTokenURL)) {\r\n            return this.handle401Error(req, next);\r\n          }else {\r\n            // No tiene autorizacion (UnAuthorized)\r\n            // Si se vence el token en el backend..se cierra la sesion en el frontend\r\n            if (this.authService.isAuthenticated()) {\r\n                this.authService.logOut();\r\n            }\r\n            this.router.navigate(['auth/login']);\r\n          }\r\n        }\r\n\r\n        // checamos si no esta autorizado...\r\n        if (e.status == 403) {\r\n          this.authService.logOut();\r\n          this.router.navigate(['auth/login']);\r\n          Swal.fire('Acceso Denegado', `Hola ${this.token.userDetails.name} no tienes acceso a este recurso`, 'warning');\r\n        }\r\n        return throwError(e);\r\n      }\r\n    ));\r\n  }\r\n\r\n  private isRefreshing = false;\r\n  private refreshTokenSubject: BehaviorSubject<any> = new BehaviorSubject<any>(null);\r\n\r\n  private handle401Error(request: HttpRequest<any>, next: HttpHandler) {\r\n    if (!this.isRefreshing) {\r\n      this.isRefreshing = true;\r\n      this.refreshTokenSubject.next(null);\r\n\r\n      return this.auth.refreshToken().pipe(\r\n        switchMap((token: any) => {\r\n          this.isRefreshing = false;\r\n\r\n          let decodeAcsessToken: TokenPayloadDTO = this.encrDecr.getDecodedAccessToken(token.content.token.accessToken);\r\n          decodeAcsessToken.DanoneTokenPayload.token = token.content.token;\r\n          this.tokenPorviderService.setToken(this._authMapperService.transform(decodeAcsessToken.DanoneTokenPayload));\r\n\r\n          this.refreshTokenSubject.next(decodeAcsessToken.DanoneTokenPayload.token.accessToken);\r\n          \r\n          return next.handle(this.addTokenHeader(request, decodeAcsessToken.DanoneTokenPayload.token.accessToken));\r\n        }), catchError((err) => {\r\n          this.isRefreshing = false;\r\n          \r\n          if (this.authService.isAuthenticated()) {\r\n              this.authService.logOut();\r\n          }\r\n          this.router.navigate(['auth/login']);\r\n          return throwError(err);\r\n        })\r\n      );\r\n    }\r\n\r\n    return this.refreshTokenSubject.pipe(\r\n      filter(token => token !== null),\r\n      take(1),\r\n      switchMap((token) => next.handle(this.addTokenHeader(request, token)))\r\n    );\r\n  }\r\n\r\n  private addTokenHeader(request: HttpRequest<any>, token: string) {\r\n    /* this.token = this.tokenPorviderService.getToken(); */\r\n\r\n    return request.clone({\r\n      setHeaders: {\r\n        authorization: `Bearer ${ token }`\r\n      }\r\n    });\r\n  }\r\n}\r\n","export class LoginUserModel {\r\n    userName?: string;   \r\n    password?: string;\r\n}\r\n","import { TokenModel } from \"./token.model\";\r\n\r\nexport class TokenProviderModel<UserDetailsType, UserRolesType> {\r\n    token!: TokenModel;\r\n    userDetails!: UserDetailsType;\r\n    roles!: UserRolesType[];\r\n}\r\n","export class TokenModel {\r\n    accessToken!: string;\r\n    refreshToken!: string;\r\n}","export class UserDetailModel {\r\n    userId?: number;\r\n    name?: string;\r\n    lastName?: string;\r\n    email?: string;\r\n    userName?: string;\r\n    active?: boolean;\r\n    typeRoute?: typeRouteModel[];\r\n}\r\n\r\nexport interface typeRouteModel{\r\n    typeRouteId: number;\r\n}","export class UserRolesModel{\r\n    id:number | undefined;\r\n    name: string | undefined;\r\n    functions: FunctionModel[] | undefined;\r\n    companies: CompanyModel[] | undefined;\r\n    paymentPeriodicity: PaymentPeriodicityModel[] | undefined;\r\n    rfcExcluded: RFCExcludedModel[] | undefined;\r\n}\r\n\r\nexport class FunctionModel{\r\n    id: number | undefined;\r\n    name: string | undefined;\r\n    action: string | undefined;\r\n}\r\n\r\nexport class CompanyModel{\r\n    id: number | undefined;\r\n    cbu: string | undefined;\r\n}\r\n\r\nexport class PaymentPeriodicityModel{\r\n    id!: number;\r\n    code!: string;\r\n}\r\n\r\nexport class RFCExcludedModel{\r\n    rfcReceptor!: string;\r\n}","/*\r\n * Public API Surface of security-library\r\n */\r\n\r\nexport * from './lib/security-library.module';\r\n\r\nexport * from './lib/login/login-library.component';\r\nexport * from './lib/login/recovery-password/recovery-password.component';\r\nexport * from './lib/login/services/auth.service';\r\nexport * from './lib/login/services/auth-AD.service';\r\nexport * from './lib/login/services/implements/sessionstorage-token-provider.service';\r\nexport * from './lib/login/interceptors/auth-interceptor.interceptor';\r\nexport * from './lib/login/models/login-user.model';\r\nexport * from './lib/login/models/token-payload.model';\r\nexport * from './lib/login/models/token.model';\r\nexport * from './lib/login/models/user-detail.model'; \r\nexport * from './lib/login/models/user-role.model';\r\nexport * from './lib/login/interfaces/token-payload-provider.interface';\r\nexport * from './config-library.interface'\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}